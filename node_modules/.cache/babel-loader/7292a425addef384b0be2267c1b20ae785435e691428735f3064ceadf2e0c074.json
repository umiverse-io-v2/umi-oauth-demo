{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Encrypt using CryptoJS with AES\nexport function encrypt(text, secretKey) {\n  const iv = CryptoJS.lib.WordArray.random(16); // Generate random IV\n  const encrypted = CryptoJS.AES.encrypt(text, CryptoJS.enc.Hex.parse(secretKey), {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n\n  // Return the iv and the encrypted data, separated by a colon\n  return iv.toString(CryptoJS.enc.Hex) + ':' + encrypted.ciphertext.toString(CryptoJS.enc.Hex);\n}\n\n// Decrypt using CryptoJS with AES\nexport function decrypt(encryptedData, secretKey) {\n  const [ivHex, encryptedText] = encryptedData.split(':');\n  const iv = CryptoJS.enc.Hex.parse(ivHex);\n  const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedText);\n  const decrypted = CryptoJS.AES.decrypt({\n    ciphertext: encryptedBytes\n  },\n  // Decrypt using the ciphertext\n  CryptoJS.enc.Hex.parse(secretKey), {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n\n  // Return the decrypted text\n  return decrypted.toString(CryptoJS.enc.Utf8);\n}\n\n// Create a 32-byte random key and return it in Hex format\nexport function createSecretKey() {\n  const secretKey = CryptoJS.lib.WordArray.random(32); // AES-256 requires a 32-byte key\n  const secretKeyHex = secretKey.toString(CryptoJS.enc.Hex);\n  return secretKeyHex;\n}\n\n// Restore the key from Hex format to WordArray\nexport function restoreSecretKey(secretKeyHex) {\n  const secretKey = CryptoJS.enc.Hex.parse(secretKeyHex);\n  return secretKey;\n}","map":{"version":3,"names":["CryptoJS","encrypt","text","secretKey","iv","lib","WordArray","random","encrypted","AES","enc","Hex","parse","mode","CBC","padding","pad","Pkcs7","toString","ciphertext","decrypt","encryptedData","ivHex","encryptedText","split","encryptedBytes","decrypted","Utf8","createSecretKey","secretKeyHex","restoreSecretKey"],"sources":["/Users/laifu/Documents/umiverse.io/repo_v2/umi-oauth-demo/src/utils/AES.tsx"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\n// Encrypt using CryptoJS with AES\nexport function encrypt(text: string, secretKey: string) {\n  const iv = CryptoJS.lib.WordArray.random(16); // Generate random IV\n  const encrypted = CryptoJS.AES.encrypt(text, CryptoJS.enc.Hex.parse(secretKey), {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n\n  // Return the iv and the encrypted data, separated by a colon\n  return iv.toString(CryptoJS.enc.Hex) + ':' + encrypted.ciphertext.toString(CryptoJS.enc.Hex);\n}\n\n// Decrypt using CryptoJS with AES\nexport function decrypt(encryptedData: string, secretKey: string) {\n  const [ivHex, encryptedText] = encryptedData.split(':');\n  const iv = CryptoJS.enc.Hex.parse(ivHex);\n  const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedText);\n\n  const decrypted = CryptoJS.AES.decrypt(\n    { ciphertext: encryptedBytes } as any, // Decrypt using the ciphertext\n    CryptoJS.enc.Hex.parse(secretKey),\n    {\n      iv: iv,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    }\n  );\n\n  // Return the decrypted text\n  return decrypted.toString(CryptoJS.enc.Utf8);\n}\n\n// Create a 32-byte random key and return it in Hex format\nexport function createSecretKey() {\n  const secretKey = CryptoJS.lib.WordArray.random(32); // AES-256 requires a 32-byte key\n  const secretKeyHex = secretKey.toString(CryptoJS.enc.Hex);\n  return secretKeyHex;\n}\n\n// Restore the key from Hex format to WordArray\nexport function restoreSecretKey(secretKeyHex: string) {\n  const secretKey = CryptoJS.enc.Hex.parse(secretKeyHex);\n  return secretKey;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,OAAO,SAASC,OAAOA,CAACC,IAAY,EAAEC,SAAiB,EAAE;EACvD,MAAMC,EAAE,GAAGJ,QAAQ,CAACK,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAMC,SAAS,GAAGR,QAAQ,CAACS,GAAG,CAACR,OAAO,CAACC,IAAI,EAAEF,QAAQ,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAACT,SAAS,CAAC,EAAE;IAC9EC,EAAE,EAAEA,EAAE;IACNS,IAAI,EAAEb,QAAQ,CAACa,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAEf,QAAQ,CAACgB,GAAG,CAACC;EACxB,CAAC,CAAC;;EAEF;EACA,OAAOb,EAAE,CAACc,QAAQ,CAAClB,QAAQ,CAACU,GAAG,CAACC,GAAG,CAAC,GAAG,GAAG,GAAGH,SAAS,CAACW,UAAU,CAACD,QAAQ,CAAClB,QAAQ,CAACU,GAAG,CAACC,GAAG,CAAC;AAC9F;;AAEA;AACA,OAAO,SAASS,OAAOA,CAACC,aAAqB,EAAElB,SAAiB,EAAE;EAChE,MAAM,CAACmB,KAAK,EAAEC,aAAa,CAAC,GAAGF,aAAa,CAACG,KAAK,CAAC,GAAG,CAAC;EACvD,MAAMpB,EAAE,GAAGJ,QAAQ,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAACU,KAAK,CAAC;EACxC,MAAMG,cAAc,GAAGzB,QAAQ,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAACW,aAAa,CAAC;EAE5D,MAAMG,SAAS,GAAG1B,QAAQ,CAACS,GAAG,CAACW,OAAO,CACpC;IAAED,UAAU,EAAEM;EAAe,CAAC;EAAS;EACvCzB,QAAQ,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAACT,SAAS,CAAC,EACjC;IACEC,EAAE,EAAEA,EAAE;IACNS,IAAI,EAAEb,QAAQ,CAACa,IAAI,CAACC,GAAG;IACvBC,OAAO,EAAEf,QAAQ,CAACgB,GAAG,CAACC;EACxB,CACF,CAAC;;EAED;EACA,OAAOS,SAAS,CAACR,QAAQ,CAAClB,QAAQ,CAACU,GAAG,CAACiB,IAAI,CAAC;AAC9C;;AAEA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAChC,MAAMzB,SAAS,GAAGH,QAAQ,CAACK,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EACrD,MAAMsB,YAAY,GAAG1B,SAAS,CAACe,QAAQ,CAAClB,QAAQ,CAACU,GAAG,CAACC,GAAG,CAAC;EACzD,OAAOkB,YAAY;AACrB;;AAEA;AACA,OAAO,SAASC,gBAAgBA,CAACD,YAAoB,EAAE;EACrD,MAAM1B,SAAS,GAAGH,QAAQ,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAACiB,YAAY,CAAC;EACtD,OAAO1B,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}