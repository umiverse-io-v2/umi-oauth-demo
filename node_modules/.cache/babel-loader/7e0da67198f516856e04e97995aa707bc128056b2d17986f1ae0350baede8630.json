{"ast":null,"code":"var _jsxFileName = \"/Users/laifu/Documents/umiverse.io/repo_v2/umi-oauth-demo/src/Pages/LoginSuccess.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretKey = process.env.REACT_APP_SECRET_KEY || 'your-secret-key'; // 从环境变量获取密钥\n\nconst LoginSuccess = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const authorizationCode = queryParams.get('authorizationCode');\n  const [idToken, setIdToken] = useState(null);\n  useEffect(() => {\n    if (authorizationCode) {\n      try {\n        // 解密 authorizationCode，得到 idToken\n        const decryptedData = decryptAuthorizationCode(authorizationCode);\n        setIdToken(decryptedData);\n        console.log('Decrypted idToken:', decryptedData);\n      } catch (error) {\n        console.error('Error decrypting authorizationCode:', error);\n      }\n\n      // Optionally, redirect after a few seconds\n      setTimeout(() => {\n        navigate('/index');\n      }, 2000); // Redirect to /index after 2 seconds\n    }\n  }, [authorizationCode, navigate]);\n  const decryptAuthorizationCode = code => {\n    try {\n      // 分离 IV 和加密的内容 (假设你使用相同的方法将 IV 和加密内容分离)\n      const [iv, encryptedData] = code.split(':');\n\n      // 将 IV 转换为 Buffer 格式\n      const ivBytes = CryptoJS.enc.Hex.parse(iv);\n      const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedData);\n\n      // 解密\n      const decrypted = CryptoJS.AES.decrypt({\n        ciphertext: encryptedBytes\n      }, CryptoJS.enc.Hex.parse(secretKey), {\n        iv: ivBytes,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.Pkcs7\n      });\n\n      // 将解密后的数据转换为字符串 (UTF-8)\n      const decryptedText = decrypted.toString(CryptoJS.enc.Utf8);\n      return decryptedText;\n    } catch (error) {\n      throw new Error('Failed to decrypt authorization code');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login successful, welcome to our website!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), idToken && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your idToken is: \", idToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginSuccess, \"krnTAwy0MrxW0NXv03Z6hS2Ijbc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = LoginSuccess;\nexport default LoginSuccess;\nvar _c;\n$RefreshReg$(_c, \"LoginSuccess\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","CryptoJS","jsxDEV","_jsxDEV","secretKey","process","env","REACT_APP_SECRET_KEY","LoginSuccess","_s","navigate","location","queryParams","URLSearchParams","search","authorizationCode","get","idToken","setIdToken","decryptedData","decryptAuthorizationCode","console","log","error","setTimeout","code","iv","encryptedData","split","ivBytes","enc","Hex","parse","encryptedBytes","decrypted","AES","decrypt","ciphertext","mode","CBC","padding","pad","Pkcs7","decryptedText","toString","Utf8","Error","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/laifu/Documents/umiverse.io/repo_v2/umi-oauth-demo/src/Pages/LoginSuccess.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport CryptoJS from 'crypto-js';\n\nconst secretKey = process.env.REACT_APP_SECRET_KEY || 'your-secret-key'; // 从环境变量获取密钥\n\nconst LoginSuccess: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const authorizationCode = queryParams.get('authorizationCode');\n  const [idToken, setIdToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (authorizationCode) {\n      try {\n        // 解密 authorizationCode，得到 idToken\n        const decryptedData = decryptAuthorizationCode(authorizationCode);\n        setIdToken(decryptedData);\n        console.log('Decrypted idToken:', decryptedData);\n      } catch (error) {\n        console.error('Error decrypting authorizationCode:', error);\n      }\n\n      // Optionally, redirect after a few seconds\n      setTimeout(() => {\n        navigate('/index');\n      }, 2000); // Redirect to /index after 2 seconds\n    }\n  }, [authorizationCode, navigate]);\n\n  const decryptAuthorizationCode = (code: string) => {\n    try {\n      // 分离 IV 和加密的内容 (假设你使用相同的方法将 IV 和加密内容分离)\n      const [iv, encryptedData] = code.split(':');\n\n      // 将 IV 转换为 Buffer 格式\n      const ivBytes = CryptoJS.enc.Hex.parse(iv);\n      const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedData);\n\n      // 解密\n      const decrypted = CryptoJS.AES.decrypt(\n        { ciphertext: encryptedBytes },\n        CryptoJS.enc.Hex.parse(secretKey),\n        {\n          iv: ivBytes,\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7,\n        }\n      );\n\n      // 将解密后的数据转换为字符串 (UTF-8)\n      const decryptedText = decrypted.toString(CryptoJS.enc.Utf8);\n      return decryptedText;\n    } catch (error) {\n      throw new Error('Failed to decrypt authorization code');\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <h1>Login successful, welcome to our website!</h1>\n      {idToken && <p>Your idToken is: {idToken}</p>}\n    </div>\n  );\n};\n\nexport default LoginSuccess;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}